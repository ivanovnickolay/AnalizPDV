<?php

namespace AnalizPdvBundle\Entity\Repository;

/**
 * ReestrBranch_out
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReestrBranch_out extends \Doctrine\ORM\EntityRepository
{
	/**
	 * поиск данных в Реестре выданых НН по параметрам
	 *
	 * @uses allFromPeriod_Branch класс поиска
	 * @uses allFromPeriod_Branch::getArrayFromSearchErpn возвращает данные для $arrayFromSearch
	 *
	 * использованные расширения
	 * @link  https://simukti.net/blog/2012/04/05/how-to-select-year-month-day-in-doctrine2/
	 * @link  https://github.com/beberlei/DoctrineExtensions
	 *
	 *
	 * @param $arrayFromSearch
	 * @return array
	 */
	public function getSearchAllFromPeriod_Branch($arrayFromSearch)
	{
		$emConfig = $this->getEntityManager()->getConfiguration();
		$emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
		$emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');

		$qr=$this->createQueryBuilder('ReestrOut');
		$qr->where('MONTH(ReestrOut.dateCreateInvoice)=:m');
		$qr->setParameter('m', $arrayFromSearch['monthCreateInvoice']);
		$qr->andWhere('YEAR(ReestrOut.dateCreateInvoice)=:y');
		$qr->setParameter('y', $arrayFromSearch['yearCreateInvoice']);

		if(array_key_exists('numMainBranch', $arrayFromSearch))
		{
			$qr->andWhere('ReestrOut.numBranch=:nb');
			$qr->setParameter('nb', $arrayFromSearch['numMainBranch']);
		}

		$result=$qr->getQuery();
		return $result->getResult();
	}

	/**
	 * поиск данных в Реестре выданых НН по параметрам
	 *
	 * @uses allFromPeriod_Branch класс поиска
	 * @uses allFromPeriod_Branch::getArrayFromSearchErpn возвращает данные для $arrayFromSearch
	 *
	 * использованные расширения
	 * @link  https://simukti.net/blog/2012/04/05/how-to-select-year-month-day-in-doctrine2/
	 * @link  https://github.com/beberlei/DoctrineExtensions
	 *
	 *
	 * @param $arrayFromSearch
	 * @return array
	 */
	public function getSearchAllFromParam($arrayFromSearch)
	{
		$emConfig = $this->getEntityManager()->getConfiguration();
		$emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
		$emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');

		$qr=$this->createQueryBuilder('ReestrOut');
		$qr->where('MONTH(ReestrOut.dateCreateInvoice)=:m');
		$qr->setParameter('m', $arrayFromSearch['monthCreateInvoice']);
		$qr->andWhere('YEAR(ReestrOut.dateCreateInvoice)=:y');
		$qr->setParameter('y', $arrayFromSearch['yearCreateInvoice']);
		$qr->andWhere('ReestrOut.typeInvoiceFull=:tif');
		$qr->setParameter('tif', $arrayFromSearch['typeInvoiceFull']);

		if(array_key_exists('innClient', $arrayFromSearch))
		{
			$qr->andWhere('ReestrOut.innClient=:inn');
			$qr->setParameter('inn', $arrayFromSearch['innClient']);
		}

		if(array_key_exists('numInvoice', $arrayFromSearch))
		{
			$qr->andWhere('ReestrOut.numInvoice=:ni');
			$qr->setParameter('ni', $arrayFromSearch['numInvoice']);
		}

		if(array_key_exists('dateCreateInvoice', $arrayFromSearch))
		{
			$qr->andWhere('ReestrOut.dateCreateInvoice=:dсi');
			$qr->setParameter('dсi', $arrayFromSearch['dateCreateInvoice']);
		}


		$result=$qr->getQuery();
		return $result->getResult();
	}

	/**
	 * Проверка наличия рестра в периоде
	 * @param $month string
	 * @param $year string
	 * @param $numMainBranch string
	 * @return bool
	 */
	public function is_NumMainBranchToPeriod($month, $year, $numMainBranch)
	{
		$qr=$this->_em->getConnection()->prepare(
			'SELECT COUNT(r.id) FROM reestrbranch_out r
		 WHERE r.month=:m 
		 and r.year=:y 
		 AND r.num_branch=:nb
		');
			$qr->bindValue('m', $month);
			$qr->bindValue('y', $year);
			$qr->bindValue('nb', $numMainBranch);
		$qr->execute();
		$countRec=$qr->fetchAll();

		if ($countRec!=0) {
			return true;
		} else{
			return false;
		}





	}
}
