<?php

namespace AnalizPdvBundle\Entity\Repository;
use AnalizPdvBundle\AnalizPdvBundle;

/**
 * ErpnOut
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ErpnOut extends \Doctrine\ORM\EntityRepository
{
	/**
	 * Проверка уникальности налоговой накладной в базе
	 * если проверка пройдена успешно возвращает true
	 * @param \LoadFileBundle\Entity\Erpn_out $Invoice
	 * @return bool
	 */
	public function ValidInvoice(\AnalizPdvBundle\Entity\ErpnOut $Invoice )
	{
		$num=$Invoice->getNumInvoice();
		$date=$Invoice->getDateCreateInvoice()->format('Y-m-d');
		$type=$Invoice->getTypeInvoiceFull();
		$inn=$Invoice->getInnClient();
		// Получаем количество записей по указанному условию
		if ($this->getCountKeyFields($num,$date,$type,$inn)== 0)
		{
			// если запесей нет то возвращаем истинно
			return true;
		} else
		{
			return false;
		}
	}


	/*
	 * Возвращеет количество записей по условию
	 * @param $numInvoice
	 * @param $dateInvoice
	 * @param $typeInvoice
	 * @param $INN
	 * @return bool|mixed
	 * @throws \Doctrine\DBAL\DBALException
	 */
	public function getCountKeyFields($numInvoice, $dateInvoice, $typeInvoice, $INN)
	{
		$qb = $this->createQueryBuilder("erpnOut");
		$qb->select($qb->expr()->count('erpn.id'));
		$qb->from('LoadFileBundle:Erpn_out','erpn');
		$qb->where("erpn.NumInvoice=:num");
		$qb->andWhere("erpn.DateCreateInvoice=:d");
		$qb->andWhere("erpn.InnClient=:inn");
		$qb->andWhere("erpn.TypeInvoiceFull=:t");
		$qb->setParameter("num", $numInvoice);
		$qb->setParameter("d", $dateInvoice);
		$qb->setParameter("t", $typeInvoice);
		$qb->setParameter("inn", $INN);

		$count = $qb->getQuery()->getSingleScalarResult();

		return $count;
	}

	public function loadDataInfile($file){
		$db = $this->_em->getConnection();
		$sql = "LOAD DATA LOCAL INFILE $file REPLACE INTO TABLE `LoadFiles`.`Erpn_out`
CHARACTER SET cp1251 FIELDS TERMINATED BY ';' OPTIONALLY ENCLOSED BY '\"' ESCAPED BY '\"' LINES TERMINATED BY '\r\n'
IGNORE 1
LINES (`num_invoice`, `date_create_invoice`, `date_reg_invoice`, `type_invoice_full`,
`edrpou_client`, `inn_client`, `num_branch_client`, `name_client`, @suma_invoice, @pdvinvoice,
@baza_invoice, `name_vendor`, `num_branch_vendor`, `num_reg_invoice`, `type_invoice`, `num_contract`,
@date_contract, `type_contract`, `person_create_invoice`, `key_field`)
SET suma_invoice=IF(@suma_invoice='',0,REPLACE(@suma_invoice,',','.')),
pdvinvoice= IF(@pdvinvoice='',0,REPLACE(@pdvinvoice,',','.')),
baza_invoice=IF(@baza_invoice='',0,REPLACE(@baza_invoice,',','.')),
date_contract=IF(@date_contract='',NULL,@date_contract)\";";
		$stmt = $db->prepare($sql);
		$stmt->execute();
	}
}
